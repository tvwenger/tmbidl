pro write_table,data,help=help,fname=fname,length=length,$
    decim=decim,header=header,names=names,units=units
;+
; NAME:
;       write_table
;
;            ==========================================================
;            Syntax: write_table,data,/help,fname=fname,length=length,$
;                    decim=decim,header=header
;            ==========================================================
;
;   write_table  procedure to 
;   -----------  take data saved in a read_table type data structure
;                and save it in a read_table type file.
;                Basically, this is the opposite of read_table.pro    
;                 
;
;   KEYWORDS:
;              HELP   - get syntax help
;              FNAME  - fully qualified filepath to save file
;                       default is ../../tables/write_table.dat
;              LENGTH - the length in characters of each column
;                       a space is put between each column in addition
;                       default is length=[8,8,8,...]
;              DECIM  - number of decimal places to keep for the
;                       floating point values in data. Ignored if data
;                       type isn't floating point.
;                       default is decim=[3,3,3,...]
;              HEADER - a string to use in first line of table
;                       default is 'generated by write_table.pro'
;              NAMES  - array of names for each column
;                       default is names=['column1','column2',...]
;              UNITS  - array of units for each column
;                       default is units=['-','-',...]
;
;  NOTE: LENGTH, NAMES, UNITS arrays must be same 
;        length as n_elements(tag_names(data))
;
; MODIFICATION HISTORY:
;
; V7.0 tvw 13may2013 - creation!
;
;-
on_error,!debug ? 0 : 2
compile_opt idl2
if keyword_set(help) or n_params() lt 1 then begin & get_help,'write_table' & return & endif
;
; get number of tags in data
ntags=n_elements(tag_names(data))
;
; assign defaults
if ~keyword_set(fname) then fname='../../tables/write_table.dat'
if ~keyword_set(length) then length=intarr(ntags)+8
if ~keyword_set(decim) then decim=intarr(ntags)+3
if ~keyword_set(header) then header='generated by write_table.pro'
if ~keyword_set(names) then begin
   names=strarr(ntags)
   for i=0,ntags-1 do begin 
      names[i]='column'+string(i,format='(i0)')
   endfor
endif
if ~keyword_set(units) then units=strarr(ntags)+'-'
;
; check that arrays are right size
if n_elements(length) ne ntags or n_elements(decim) ne ntags or $
   n_elements(names) ne ntags or n_elements(units) ne ntags then begin
   print,'LENGTH, NAMES, and UNITS all need to be the same size as n_elements(tag_names(data))'
   return
endif
;
; check that length of each tag is the same
tagsize=n_elements(data.(0))
for i=1,ntags-1 do begin
   if n_elements(data.(i)) ne tagsize then begin
      print,'Number of elements in each tag of data is not the same!'
      return
   endif
endfor
;
; set up file
openw,lun,fname,/get_lun
printf,lun,header
format='('
; need to add 1 to length here since we add extra spaces in the data
for i=0,ntags-2 do begin
   format=format+'A-'+string(length[i]+1,format='(i0)')+','
endfor
format=format+'A-'+string(length[ntags-1]+1,format='(i0)')+')'
printf,lun,names,format=format
printf,lun,units,format=format
;
for i=0,tagsize-1 do begin
   line=''
   for j=0,ntags-1 do begin
      siz=size(data[i].(j))
      case siz[1] of
         7: form='(A-'+string(length[j],format='(i0)')+')' ; string
         2: form='(I'+string(length[j],format='(i0)')+')' ; integer
      else: form='(F'+string(length[j],format='(i0)')+'.'+string(decim[j],format='(i0)')+')' ; floating point
      endcase
      line=line+string(data[i].(j),format=form)+' '
   endfor
   printf,lun,line
endfor
;
close,lun
;
return
end
